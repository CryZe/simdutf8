name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: playhouse
    strategy:
      matrix:
        toolchain: [stable, nightly]
        arch: [x86_64, i686]
        features: ["--features std", ""]
        rustflags: ["", "-C target-feature=+avx2", "-C target-feature=+sse4.2"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}-${{ matrix.arch }}
            profile: minimal
            override: true
      - name: Run tests
        run: cargo test --no-default-features ${{ matrix.features }} --verbose
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

  test-inlining:
    runs-on: playhouse
    strategy:
      matrix:
        toolchain: [stable, nightly]
        arch: [x86_64, i686]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}-${{ matrix.arch }}
            profile: minimal
            override: true
      - name: Check if the expected fns are inlined (auto)
        run: cargo asm|diff -u expected-methods-x86-auto.txt -
      - name: Check if the expected fns are inlined (avx2)
        run: cargo asm|diff -u expected-methods-x86-avx2.txt -
        env:
          RUSTFLAGS: -C target-feature=+avx2

  cross-build:
    runs-on: playhouse
    strategy:
      matrix:
        toolchain: [stable, nightly]
        arch: [x86_64]
        target: [arm-unknown-linux-gnueabi, aarch64-unknown-linux-gnu]
        features: ["--features std", ""]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}-${{ matrix.arch }}
            target: ${{ matrix.target }}
            profile: minimal
            override: true
      - name: Build
        run: cargo build --no-default-features ${{ matrix.features }} --verbose

  clippy_check:
    runs-on: playhouse
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            profile: minimal
            components: clippy
            override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --no-default-features

  benchmark:
    runs-on: fisheye
    strategy:
      matrix:
        benchmark: [pure]
    defaults:
      run:
        working-directory: bench
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            profile: minimal
            override: true
      - name: mkdir new_baselines
        run: mkdir new_baselines
      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`git rev-parse --short ${GITHUB_SHA}`" >> $GITHUB_ENV
      - name: Run avx2 benchmark
        run: cargo bench --bench throughput_${{ matrix.benchmark }} -- --color=always --save-baseline ${{ matrix.benchmark }}-avx2-$SHORT_SHA --noplot
        env:
          RUSTFLAGS: -C target-feature=+avx2
      - name: Critcmp comparison new+avx2 (${{ env.SHORT_SHA }}) vs avx2 baseline
        run: critcmp ${{ matrix.benchmark }}-avx2-$SHORT_SHA baselines/${{ matrix.benchmark }}-avx2.json --color=always
      - name: Critcmp avx2 export
        run: critcmp --export ${{ matrix.benchmark }}-avx2-$SHORT_SHA > new_baselines/${{ matrix.benchmark }}-avx2-$SHORT_SHA.json
      # - name: Run auto benchmark
      #   run: cargo bench --bench throughput_${{ matrix.benchmark }} -- --color=always --save-baseline ${{ matrix.benchmark }}-auto-$SHORT_SHA --noplot
      # - name: Critcmp comparison new+auto (${{ env.SHORT_SHA }}) vs auto baseline
      #   run: critcmp ${{ matrix.benchmark }}-auto-$SHORT_SHA baselines/${{ matrix.benchmark }}-auto.json --color=always
      # - name: Critcmp auto export
      #   run: critcmp --export ${{ matrix.benchmark }}-auto-$SHORT_SHA > new_baselines/${{ matrix.benchmark }}-auto-$SHORT_SHA.json
      - uses: actions/upload-artifact@v2
        with:
          name: baselines
          path: bench/new_baselines/*.json

